generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id        String @id @default(uuid()) @map("id")
  dni       String @unique @map("dni")
  firstName String @map("first_name")
  lastName  String @map("last_name")
  email     String @unique @map("email")
  password  String @map("password")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Customer {
  id          String  @id @default(uuid()) @map("id")
  dni         String  @unique @map("dni")
  firstName   String  @map("first_name")
  lastName    String  @map("last_name")
  phoneNumber String  @unique @map("phone_number")
  city        String? @map("city")
  email       String  @unique @map("email")
  password    String  @map("password")

  orders Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("customers")
}

model Order {
  id         String      @id @default(uuid()) @map("id")
  date       DateTime    @map("date")
  state      ORDER_STATE @default(PENDIENTE) @map("state")
  payMethod  PAY_METHOD? @map("pay_method")
  payLimit   DateTime?   @map("pay_limit")
  valuePaid  Float?      @map("value_paid")
  total      Float       @map("total")
  finalTotal Float       @map("final_total")

  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id])

  items Item[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

enum ORDER_STATE {
  GENERADO
  PENDIENTE
  FINALIZADO
}

enum PAY_METHOD {
  EFECTIVO
  TRANSFERENCIA
  DEPOSITO
}

model Item {
  id        String        @id @default(uuid()) @map("id")
  quantity  Int           @default(1) @map("quantity")
  delivered Boolean       @default(false) @map("delivered")
  state     PRODUCT_STATE @default(DISPONIBLE) @map("state")

  orderId   String  @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("items")
}

model Product {
  id    String        @id @default(uuid()) @map("id")
  price Float         @map("price")
  stock Int           @map("stock")
  state PRODUCT_STATE @default(DISPONIBLE) @map("state")

  productColorId String       @map("product_color_id")
  productColor   ProductColor @relation(fields: [productColorId], references: [id])

  sizeCategoryId String?       @map("size_category_id")
  sizeCategory   SizeCategory? @relation(fields: [sizeCategoryId], references: [id])

  items Item[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("products")
}

enum PRODUCT_STATE {
  DISPONIBLE
  BAJO_PEDIDO
  NO_DISPONIBLE
}

model ProductColor {
  id String @id @default(uuid()) @map("id")

  productMasterId String        @map("product_master_id")
  productMaster   ProductMaster @relation(fields: [productMasterId], references: [id])
  colorId         String?       @map("color_id")
  color           Color?        @relation(fields: [colorId], references: [id])

  images   Image[]
  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("products_colors")
}

model Color {
  id    String @id @default(uuid()) @map("id")
  name  String @unique @map("name")
  value String @unique @map("value")

  productsColors ProductColor[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("colors")
}

model SizeCategory {
  id String @id @default(uuid()) @map("id")

  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  sizeId     String   @map("size_id")
  size       Size     @relation(fields: [sizeId], references: [id])

  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sizes_categories")
}

model ProductMaster {
  id          String          @id @default(uuid()) @map("id")
  name        String          @map("name")
  description String?         @map("description")
  gender      PRODUCT_GENDER? @map("gender")

  brandId    String   @map("brand_id")
  brand      Brand    @relation(fields: [brandId], references: [id])
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])

  productsColors ProductColor[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("products_master")
}

enum PRODUCT_GENDER {
  HOMBRE
  MUJER
  UNISEX
}

model Size {
  id    String @id @default(uuid()) @map("id")
  name  String @map("name")
  value String @map("value")

  sizesCategories SizeCategory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sizes")
}

model Category {
  id   String @id @default(uuid()) @map("id")
  name String @unique @map("name")

  productsMaster  ProductMaster[]
  sizesCategories SizeCategory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Brand {
  id   String @id @default(uuid()) @map("id")
  name String @unique @map("name")

  productsMaster ProductMaster[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("brands")
}

model Image {
  id  String @id @default(uuid()) @map("id")
  url String @map("url")

  productColorId String       @map("product_color_id")
  productColor   ProductColor @relation(fields: [productColorId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("images")
}
